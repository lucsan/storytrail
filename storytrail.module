<?php

/**
 * @file
 * Reads Collabatorium story files and creates the story trail.

 * TODO: allow users to read authors unmerged scenes.
 * TODO: allow more than one project.
 */

/**
 * a file to keep all the database call function in as a way of keeping code organized
 */
include_once('storytrail.data.inc');


/**
 * Implements hook_menu().
 */
function storytrail_menu() {
  $items = array();
  // Admin menu items template.
  /*$items['admin/storytrail'] = array(
    'title' => 'storytrail',
    'description' => 'storytrail menu item.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storytrail_admin_form'),
    'access arguments' => array('administer storytrail'),
    'file' => 'storytrail.admin.inc',
  );*/


  $items['storytrail_display'] = array(
    'title' => 'Read - Tails from the river of life.',
    'description' => 'Create a story as you read it, tails from the river of life, a story made by you.',
    'page callback' => 'storytrail_display',
    'page arguments' => array(),
    'access arguments' => array('access storytrail'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 4,
  );

  $items['configstorytrail'] = array(
    'title' => 'Config Storytrail',
    'description' => '',
    'page callback' => 'storytrail_config',
    'page arguments' => array(),
    'access arguments' => array('administer storytrail'),
    'type' => MENU_NORMAL_ITEM,

  );

  $items['storytrail_scene'] = array(
    'title' => 'Create - a scene for the story river',
    'description' => '',
    'page callback' => 'storytrail_create_scene',
    'page arguments' => array(),
    'access arguments' => array('create storytrail'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 4,
  );

  $items['storytrail_edit_scene'] = array(
    'title' => 'Edit - a scene from the story river',
    'description' => '',
    'page callback' => 'storytrail_edit_scene',
    'page arguments' => array(),
    'access arguments' => array('create storytrail'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 4,
  );

  return $items;
}

/**
* Implementation of hook_permission().
*/
function storytrail_permission() {
  return array(
    'access storytrail' => array(
      'title' => t('storytrail access'),
      'description' => t('Allow users to read Tails from ther river of life.'),
    ),
    'create storytrail' => array(
      'title' => t('storytrail edit / create'),
      'description' => t('Allow users to create and edit scenes.'),
    ),
    'administer storytrail' => array(
      'title' => t('storytrail administration'),
      'description' => t(''),
    ),
  );
}

$story_title = '';
function storytrail_title_change() {
  global $story_title;
  return "Tails from the river of life.";
}

function storytrail_create_scene() {
  storytrail_check_user_story_folder();
  return drupal_get_form('storytrail_create_scene_form');
}

function storytrail_create_scene_form() {
  global $user;
  $text = '';
  $scene = '';
  $meta_texts = array('aut' => '', 'edt' =>'', 'chr' => '', 'set' => '', 'pre' => '');
  $path = getcwd() . '/git/' . $user->name . '/storyriver/Scenes';
  if ($file_name = arg(1)) {
    $file = file_get_contents($path . '/' . $file_name);
    $scene = strtolower(stristr($file_name, '.', true));
    $text = stristr($file, '[', true);
    $text = trim($text);
    $meta_data = stristr($file, '[', false);
    $meta_list = explode('[', $meta_data);
    $meta_data = array();
    foreach ($meta_list as $listing) {
      if ($listing == "") continue;
      $listing = explode(':', $listing);
      $listing[1] = str_replace("]", "", $listing[1]);
      $meta_data[$listing[0]][] = $listing[1];
    }

    foreach ($meta_data as $key => $lists) {
      $display = '';
      foreach ($lists as $item) {
        $display .= $item . '; ';
      }
      $meta_texts[$key] = $display;
    }

  $form['storytrail']['delete'] = array(
    '#type' => 'submit',
    '#value' => 'Delete',
    '#description' => t("Delete this scene from your scenes list."),
    '#field_suffix' => t("Delete this scene from your scenes list."),
  );

  }

  $form['storytrail']['message1'] = array(

  );

  $form['#method'] = 'post';

  $form['storytrail']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Scene Title'),
    '#description' => t(""),
    '#default_value' => t(ucfirst($scene)),
  );

  $form['storytrail']['old_name'] = array(
    '#type' => 'hidden',
    '#value' => t(ucfirst($scene)),
  );

  $form['storytrail']['aut'] = array(
    '#type' => 'textfield',
    '#title' => t("Author's name(s)"),
    '#description' => t("Colon separated list of Authors (eg: Barry Wong; lucsan)"),
    '#default_value' => t($meta_texts['aut']),
  );

  $form['storytrail']['edt'] = array(
    '#type' => 'textfield',
    '#title' => t("Editor / proofer's name(s)"),
    '#description' => t("Colon separated list of Editors (eg: Barry Wong; lucsan)"),
    '#default_value' => t($meta_texts['edt']),
  );

  $form['storytrail']['text'] = array(
    '#type' => 'textarea',
    '#title' => t('The Scene'),
    '#description' => t(""),
    '#default_value' => t($text),
  );

  $form['storytrail']['chr'] = array(
    '#type' => 'textfield',
    '#title' => t('Characters names'),
    '#description' => t("Colon separated list of Existing and new characters and props who appear in this scene (eg: The dark man; Mr smith; walther pp36 pistol)"),
    '#default_value' => t($meta_texts['chr']),
  );

  $form['storytrail']['set'] = array(
    '#type' => 'textfield',
    '#title' => t('The Setting'),
    '#description' => t("Colon separated list of Settings (eg: Brighton station; Brighton station platform 2). This should be a list of existing settings."),
    '#default_value' => t($meta_texts['set']),
  );

  $form['storytrail']['pre'] = array(
    '#type' => 'textfield',
    '#title' => t('Scenes which should preceed this scene. This should be a list of existing settings.'),
    '#description' => t(""),
    '#default_value' => t($meta_texts['pre']),
  );


  $form['storytrail']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit', // The name on the button.
    '#description' => t("Submit this."), // Displays nothing.
  );

    return $form;
}

function storytrail_create_scene_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if ($values['name'] == '') {
    form_set_error('name', 'Your scene must have a unique title.');
  }
}

function storytrail_create_scene_form_submit($form, &$form_state) {
  global $user;

  $path = getcwd() . '/git/' . $user->name . '/storyriver/Scenes';
  $values = $form_state['values'];
  $text = $values['text'];
  $file_name = strtolower($values['name']) . '.txt';
  $old_file_name = strtolower($values['old_name']) . '.txt';

  if ($values['op'] == 'Delete') {
    unlink($path . '/' . $file_name);
    drupal_set_message("'File Deleted' {$user->name} your scene <i>'{$values['name']}'</i> has been removed from your scene stack.");
    $form_state['redirect'] = array("storytrail_scene/");
    return;
  }

  $meta_data['aut'] = $values['aut'];
  $meta_data['edt'] = $values['edt'];
  $meta_data['chr'] = $values['chr'];
  $meta_data['set'] = $values['set'];
  $meta_data['pre'] = $values['pre'];

  $meta_text = '';
  foreach ($meta_data as $key => $list) {
    $items = explode(';', $list);
    foreach ($items as $item) {
      $item = trim($item);
      if ($item == '') continue;
      $meta_text .= "[{$key}:{$item}]\n";
    }
  }

  $file_data = $text . "\n" . $meta_text;

  $handle = fopen($path . '/' . $file_name, 'w');
  fwrite($handle, $file_data);
  fclose($handle);
  $act = 'Created';
  if ($old_file_name != '.txt'){ $act = 'Updated'; }
  if ($old_file_name != $file_name && $old_file_name != '.txt'){ $act = 'Renamed'; }
  drupal_set_message("{$act}: '{$user->name}' your scene <i>'{$values['name']}'</i> has been written to your scene stack.");

  if ($file_name != $old_file_name && $old_file_name != '.txt') {
    unlink($path . '/' . $old_file_name);
  }

  if ($file_name != $old_file_name) {
    $form_state['redirect'] = array("storytrail_scene/{$file_name}");
  }
  else {
    $file = strtolower($values['name']);
    $form_state['redirect'] = array("storytrail_display/{$file}");
  }


}


function storytrail_edit_scene() {
  return drupal_get_form('storytrail_edit_scene_form');
}

function storytrail_edit_scene_form() {
  global $user;
  $form['#method'] = 'post';
  $user_scenes = storytrail_scandir(getcwd() . '/git/' . $user->name . '/storyriver/Scenes');
  $options = array();
  foreach ($user_scenes as $file_name) {
    $title = ucfirst(stristr($file_name, '.', true));
    $options[$file_name] = $title;
  }
  //print_r($user_scenes);


    $form['storytrail']['select'] = array(
    '#type' => 'select',
    '#title' => t(":name Select the scene you wish to edit from your scene stack.", array(':name' => $user->name)),
    '#options' => $options, // The drupal_map_assoc will key the array.
    '#description' => t("This is a list of scenes in your stack. You can edit them, but if you did not origionally author them, your changes may not be accepted into the collective stack."),
  );



  // Submit example.
  $form['storytrail']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit', // The name on the button.
    '#description' => t("Submit this."), // Displays nothing.
  );

    return $form;
}

function storytrail_edit_scene_form_submit($form, &$form_state) {

  $file = $form_state['values']['select'];
  drupal_set_message(print_r($form_state['values']['select'],true));

  $form_state['redirect'] = array("storytrail_scene/{$file}");
}



function storytrail_config() {
  return drupal_get_form('storytrail_config_form');

}

function storytrail_config_form() {
  global $user;

  $pass = sha1('password');
  $usr = sha1('lucsan');
  $passusr = sha1($pass . $usr);
  print "pass: password " . $pass;
  print "User: lucsan " . $usr;
  print "passusr " . $passusr;
  print "passusr md5 " . md5($passusr);
  print "<br>";

//C:\Windows\SysWOW64\cmd.exe /c ""C:\Program Files (x86)\Git\bin\sh.exe" --login -i"

  //chdir('sites');
  print '<pre>';
  //print shell_exec("dir");
  //print shell_exec("cd C:\Program Files (x86)\Git\bin\ && dir");
  //print shell_exec("C:\Windows\SysWOW64\cmd.exe /c C:\progfx86\Git\bin\sh.exe --login -i 2>&1");
  //print shell_exec("C:\Program Files (x86)\Git\bin\sh.exe 2>&1");
  //print shell_exec("git status 2>&1");
  //print shell_exec("'C:\Program Files (x86)\Git\bin\sh.exe --login -i' 2>&1");
  //print shell_exec("'C:\Program Files (x86)\Git\bin\sh.exe' --login -i 2>&1");
  print '</pre>';


  $form['#method'] = 'post';

  $form['storytrail']['text'] = array(
    '#type' => 'textfield',
    '#title' => t('A textfield'),
    '#description' => t("Textfield description goes here."),
    '#default_value' => t(''),
  );

  // Submit example.
  $form['storytrail']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit', // The name on the button.
    '#description' => t("Submit this."), // Displays nothing.
  );

    return $form;


}

function storytrail_check_user_story_folder() {
  global $user;
  $path = getcwd() . '/git/' . $user->name . '/storyriver/Scenes';
  if (!is_dir($path)) {
    mkdir(getcwd() . '/git/' . $user->name);
    mkdir(getcwd() . '/git/' . $user->name . '/storyriver');
    mkdir(getcwd() . '/git/' . $user->name . '/storyriver/Scenes');
  }

}

function storytrail_scandir($path) {
  if (!is_dir($path)) return array();
  $scan = scandir($path);
  $filepaths = array();
  foreach ($scan as $filepath) {
    if ($filepath != '.' && $filepath != '..') {
      $filepaths[] = $filepath;
    }
  }
  return $filepaths;
}

function storytrail_display() {
  global $user;
  $master_path = getcwd() . '/git/admin/storyriver/Scenes';
  $master_filepaths = array_flip(storytrail_scandir($master_path));
  $user_filepaths = array();
  $all_filepaths = array();

  if ($user->uid != 0) {
    $user_path = getcwd() . '/git/' . $user->name . '/storyriver/Scenes';
    $user_filepaths = array_flip(storytrail_scandir($user_path));
  }
  else { //uid == 0

    $user->name = 'collective';
  }

    foreach ($master_filepaths as $mpath => $key) {
      if (!isset($user_filepaths[$mpath])) {
        $all_filepaths[$mpath]['file'] = $master_path . '/' . $mpath;
        $all_filepaths[$mpath]['source'] = 'public work';
        $all_filepaths[$mpath]['has_version'] = FALSE;
      }
      else{
        $all_filepaths[$mpath]['file'] = $user_path . '/' . $mpath;
        $all_filepaths[$mpath]['source'] = 'your version';
        $all_filepaths[$mpath]['has_version'] = true;
        $user_filepaths[$mpath] = NULL;
      }
    }

    foreach ($user_filepaths as $upath => $key) {
      $all_filepaths[$upath]['file'] = $user_path . '/' . $upath;
      $all_filepaths[$upath]['source'] = 'your version';
      $all_filepaths[$upath]['has_version'] = true;
    }

  $text = storytrail_stitch($user, $all_filepaths);
  return $text;
}

function storytrail_stitch($user, $filepaths) {
  global $story_title;

  $viewing = $user->name;
  $the_source = 'the source';
  $scene_file = !arg(1) ? $the_source : arg(1);

  $scene_order = array();
  $commands_data = array();
  $pieces = array();

  // Go through each file and extract the data (text and commands).
  foreach ($filepaths as $filename => $filedata) {
    $filetitle = strtolower(stristr($filename, '.', true));
    $data = file_get_contents($filedata['file']);

    $text = check_plain(stristr($data, '[', true));
    $text = trim($text);
    $text = str_replace(array("\r\n", "\n", "\r"), "</br>", $text);
    $scenes[$filetitle]['text'] = $text;
    $scenes[$filetitle]['source'] = $filedata['source'];
    $scenes[$filetitle]['filename'] = $filename;
    $scenes[$filetitle]['has_version'] = $filedata['has_version'];

    $datum = check_plain(stristr($data, '[', false));
    $commands = explode( '[', $datum);

    foreach ($commands as $command) {
      $command = str_replace(']', '', $command);
      $subcommand = explode(':', $command);
      // Add commands to the scenes array.
      if (count($subcommand) > 1) {
        $subcommand[1] = strtolower(trim($subcommand[1]));
        $scenes[$filetitle][$subcommand[0]][] = $subcommand[1];
        $commands_data[$filetitle][$subcommand[0]][$subcommand[1]] = '';
      }
      // Create scene pieces array.
      if ($subcommand[0] != '') {
        $pieces[$subcommand[0]][$subcommand[1]][$filetitle] = '';
      }
    }
  }

  $the_scene = $scenes[$scene_file];
  $ordered_scenes = storytrail_calculate_scene_order($commands_data, $the_source);

  foreach ($pieces as $type => $ids) {
    foreach ($ids as $id => $scene_list) {
    $temp = array();
      foreach ($scene_list as $scene => $nul) {
        $temp[$scene] = $ordered_scenes[$scene]['score'];
      }
      asort($temp);
      $pieces[$type][$id] = $temp;
    }
  }


  $character_links = '';
  if (isset($the_scene['chr'])) {
    foreach ($the_scene['chr'] as $character) {
      $character_title = ucwords($character);
      $character_links .= "<h4>Follow {$character_title}</h4>";
      foreach ($pieces['chr'][$character] as $file => $nul) {
        if ($file != $scene_file) {
          $character_links .= l(ucfirst($file), 'storytrail_display/' . $file ) . '</br>';
        }
      }
    }
  }

  $set_links = '';
  if (isset($the_scene['set'])) {
    foreach ($the_scene['set'] as $set) {
      $set_title = ucfirst($set);
      $set_links .= "<h4>Watch {$set_title}</h4>";
      foreach ($pieces['set'][$set] as $file => $nul) {
        if ($file != $scene_file) {
          $set_links .= l(ucfirst($file), 'storytrail_display/' . $file ) . '</br>';
        }
      }
    }
  }

  $author_links = '';
  if (isset($the_scene['aut'])) {
    foreach ($the_scene['aut'] as $author) {
      $author_links .= "<h4>Read more by {$author}</h4>";
      foreach ($pieces['aut'][$author] as $file => $nul) {
        if ($file != $scene_file) {
          $author_links .= l(ucfirst($file), 'storytrail_display/' . $file ) . '</br>';
        }
      }
    }
  }

  $text = $the_scene['text'];
  $chapter = ucfirst($scene_file);
    $story_title = $chapter;
  $creator = $the_scene['source'];
  $filename = $the_scene['filename'];
  $editlink = '';
  if ($the_scene['has_version']) $editlink = "<a href=\"../storytrail_scene/{$filename}\" >Edit</a>";

  $text = "<div><i>{$viewing} ({$creator}) {$editlink}</i></div><h3>{$chapter}</h3>" . $text;
  $text .= '<hr><div style="float: left; width: 300px;">' . $character_links . '</div>'
  . '<div style="margin-left: 320px;" >' . $set_links . '</div>'
    . '<div style="margin-left: 320px;" >' . $author_links . '</div>';
  return $text;

}

function storytrail_calculate_scene_order($commands, $the_source) {
  $scene_list = array();

  $scene_list[$the_source]['score'] = 0;
  foreach ($commands as $scene => $command) {
    $scene_list[$scene]['score'] = 0;
    $scene_list[$the_source]['score'] -= 1;
    $scene_list[$scene]['post'] = array();
    if (isset($command['pre'])) {
      foreach ($command['pre'] as $item => $nul) {
        $scene_list[$scene]['score'] += 1;
        $scene_list[$scene]['post'][] = $item;
      }
    }
  }

  foreach ($scene_list as $scene => $data) {
    foreach ($data['post'] as $post) {
      $scene_list[$post]['score'] -= 1;
    }
  }

  asort($scene_list);
  return $scene_list;
}

function write_file() {

}

function storytrail_preprocess_page(&$variables) {
  //print '<pre>';
  //$node = $variables['page'];
//print_r($node);
  //print '</pre>';
//drupal_set_message($variables);
}


/**
 * Implements hook_form_alter().
 */
function storytrail_form_user_profile_form_alter(&$form, $form_state) {
  global $user;
  $names = '';
  $author_names = db_select('storytrail_users', 'u')
  ->fields('u', array('author_names'))
  ->condition('u.uid', $user->uid, '=')
  ->execute()
  ->fetch();
  //
  //print_r($author_names);
  if(!$author_names) {
    db_insert('storytrail_users')
    ->fields(array(
    	'uid' => $user->uid,
    	'author_names' => ''
    ))
    ->execute();
  }
  else {
    $names = $author_names->author_names;
  }


  $form['author_names'] = array(
    '#type' => 'textfield',
    '#title' => 'author names',
    '#default_value' => $names,
  );
  $form['#submit'][] = 'storytrail_form_user_profile_form_submit';

}

function storytrail_form_user_profile_form_submit(&$form, $form_state) {
  global $user;

  if ($form_state['values']['author_names'] != '') {
    db_update('storytrail_users')
    ->fields(array(
      'author_names' => $form_state['values']['author_names']
    ))
    ->condition('uid', $user->uid, '=')
    ->execute();
  }
}

/**
* Implements hook_help().
*/
function storytrail_help($path, $arg) {
  if ($path == 'admin/help#storytrail') {
    return t('A module to be storytrail.');
  }
}


/**
 * Implements hook_form().
 */
function storytrail_simple_form() {
  // Form values example.
  $form['#method'] = 'post';
  //$form['#action'] = 'http://example.com/?q=foo/bar';
  //$form['#attributes'] = array(
  //'enctype' => 'multipart/form-data',
  //'target' => 'name_of_target_frame'
  //);
  $form['#prefix'] = '<div class="storytrail-form-class">';
  $form['#suffix'] = '</div>';

  // Textfield example.
  $form['storytrail']['text'] = array(
    '#type' => 'textfield',
    '#type' => 'submit',
    '#type' => 'checkbox',
    '#type' => 'radio',
    '#type' => 'textfield',
    '#title' => t('A textfield'),
    '#description' => t("Textfield description goes here."),
    '#default_value' => t('Type stuff here'),
    //'#options' => drupal_map_assoc(array()),
    // Warning: the onclick method used here can be annoying to users as it clears the textfield every time they click in it.
    // note: if you want multiple attributes each needs its own array
    '#attributes' => array(
      array('onclick' => 'this.value="";'),
      array('class' => 'storytrail_text-text-class'),
      ),
    '#field_prefix' => t('Before the element'),
    '#field_suffix' => t('After the element'),
    //'#required' => TRUE,
    '#tree' => FALSE, // Flaten the form array.
    '#access' => user_access('storytrail access'), // Restrict this element to storytrail access only
    //'#array_parents' =>
    '#attached' => array('js' => array(drupal_get_path('module', 'storytrail') . '/js/storytrail.js', )),
    //'#after_build'
  );

  // Javascript select example.
  /**
   * This seems to me to be the most efficient way of implementing an onchange event.
   * The onchange attribute references the form id.
   * This method does not require a submit button, it will call the first submit button on the form.
   * If there is no submit button on the form hook_form_submit() will not be called, but hook_form_validate() will.
   */
  $options = storytrail_demo_select_data_load();  // Some data is loaded for the option - function in: storytrail.data.inc .
  $form['storytrail']['select'] = array(
    '#type' => 'select',
    '#title' => t('A select'),
    '#options' => drupal_map_assoc($options), // The drupal_map_assoc will key the array.
    '#default_value' => 'fish', // Note: this is dictated by the key of the array - use array_keys().
    '#attributes' => array('onchange' => 'document.storytrail-form.submit();'), // Note: this must be the id of the form.
    '#description' => t("Select something from the list."),
  );

  // Date example.
  $form['storytrail']['date'] = array(
    '#title' => t('Date'),
    '#type' => 'date',
    '#description' => t("Change the date."),
    '#default_value' => array(
      'month' => format_date(time(), 'custom', 'n'),
      'day' => format_date(time(), 'custom', 'j'),
      'year' => format_date(time(), 'custom', 'Y'),
    ),
  );

  // File upload - note: requires $form['#attributes']['enctype'] = 'multipart/form-data'.
  $form['storytrail']['picture_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload picture'),
    '#size' => 48,
    '#description' => t("Your virtual face or picture.")
  );

  // Checkbox example.
  $form['storytrail']['checkbox'] = array(
    '#type' => 'checkbox',
    '#title' => t('A checkbox'),
    '#default_value' => 1,
    '#description' => t("Yes or no."),
  );

  // Checkboxes example.
  $form['storytrail']['checkboxes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Some checkboxes'),
    '#options' => $options,
    '#default_value' => array(2, 4), // Note: this is dictated by the key of the array - use array_keys().
    '#description' => t("Select things from the list."),
  );

  // Password example.
  $form['storytrail']['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#maxlength' => 60,
    '#size' => 15,
  );

  // Confirmed password example.
  $form['storytrail']['account']['pass'] = array(
    '#type' => 'password_confirm',
    '#description' => 'To change the current user password, enter the new password in both fields.',
    '#size' => 25,
  );

  // Secret value example - never passed to the browser, goes straight to $form_state.
  $form['storytrail_secret']['value'] = array(
    '#type' => 'value',
    '#value' => t('theSecret'),
  );

  // Hidden value example.
  $form['storytrail_hidden']['value'] = array(
    '#type' => 'hidden',
    '#value' => t('notSeenOnScreen'),
  );

  // Item example.
  $form['storytrail']['item'] = array(
    '#type' => 'item',
    '#title' => t('Item'),
    '#description' => t("This is an item output"),
  );

  // Image button example - note: values are retrieved from $form_state['clicked_button']['#value'].
  $form['storytrail']['image_button'] = array(
    '#type' => 'image_button',
    '#src' => 'images/button.png',
    '#value' => 'a button',
  );

  // Submit example.
  $form['storytrail']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit', // The name on the button.
    '#description' => t("Submit this."), // Displays nothing.
  );

  // Post render javascript used in the form.
  $form['storytrail']['javascript'] = array(
    '#markup' => '
    <script>
      // form javascript
      function myfunction(variable){
        var v = variable;
      }
    </script>
    ',
  );

    // Add the JavaScript callback to automatically set the timezone.
    drupal_add_js("
// Global Killswitch.
if (Drupal.jsEnabled) {
  $(document).ready(function() {
    Drupal.setDefaultTimezone();
  });
}", 'inline');

  return $form;
}

/**
 * Implements hook_form_validate().
 */
function storytrail_simple_form_validate($form, &$form_state) {
  drupal_set_message('<pre>The validate values in $form_state[values] <br>' . print_r( $form_state['values'], TRUE).'</pre>');
  if ($form_state['values']['text'] == "") {
    // Format - form_set_error('element', 'message').
    form_set_error('text', 'storytrail_text Must have text');
  }
}

/**
 * Implements hook_form_submit().
 */
function storytrail_simple_form_submit($form, &$form_state) {
  drupal_set_message('<pre>The submitted values in $form_state[\'values\'] <br>' . print_r( $form_state['values'], true) . '</pre>');
}




/**
 * Implements hook_form_alter().
 */
function storytrail_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      ;
    break;
    case 'user_profile_form': ; break;
  }
    //print $form_id;
}

/**
 * Implements hook_form_alter().
 */
function storytrail_simple_form_alter(&$form, $form_state) {

}











/**
* Implements hook_block_info().
*/
function storytrail_block_info() {
  $blocks = array();
  $blocks['storytrail_block'] = array(
    'info' => t('storytrail block'),
    'status' => TRUE,
    'region' => 'sidebar_first',
    'weight' => 5,
    'visibility' => 1,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function storytrail_block_view($block_name = '') {
  if ($block_name == 'modmaker_block') {
    $list = array('a', 'b', 'c');
    $theme_args = array('items' => $list, 'type' => 'ol');
    $content = theme('item_list', $theme_args);
    $block = array(
      'subject' => t('modmaker'),
      'content' => $content,
    );
    return $block;
  }
}

/**
 * Provides admin block configuration form. Implements hook_block_configure().
 */
function storytrail_block_configure($delta) {
  $form = array();
  switch ($delta) {
    case 'modmaker_block':
      $form['modmaker_block_config'] = array(
        '#type' => 'textfield',
        '#title' => 'Configure modmaker',
        '#description' => 'modmaker config',
        '#default_value' => 'modmaker config value here',
      );
      break;
  }
  return $form;
}

/**
* Implements hook_block_save().
*/
function storytrail_block_save($delta = '', $edit = array()) {
  switch ($delta) {
  case 'storytrail_block':
    variable_set('storytrail_block_configuration', $edit['storytrail_block_config']);
    break;
  }
  return;
}





/**
* Registers the theme with the theming engine. Implements hook_theme().
*/
function storytrail_theme() {
  return array(
    'storytrail' => array(
      //'render element' => 'form', // If is a form theme.
      //'template' => 'storytrail', // Use template if a template is to be used, otherwise will call theme_MODULE.
      'variables' => array('name' => NULL, 'size' => NULL ), // Placeholders for variables to send when theme_MODULE is called.
    ),
  );
}

function theme_storytrail($variables) {
  // Prints out themeing information for you to develop from.
  print '<h4>Variables available to theme_storytrail</h4>';
  print '<pre>';
  print_r($variables);
  print '</pre>';
}

